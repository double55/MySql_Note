-- 14.1 增加数据
-- 为 employees 表新增一条记录。
-- 对于日期常量，Oracle 可以使用 DATE '2010-01-15'。
INSERT INTO employees(employee_id, first_name, last_name, email,
                      phone_number, hire_date, job_id, salary,
                      commission_pct, manager_id, department_id)
VALUES ( 207, 'Tony', 'Dong', 'TonyDong',
         '515.123.8000', '2010-01-15', 'IT_PROG', 8800,
         NULL, 102, 60);

-- 插入数据之前，数据库会针对每个数据进行校验。
-- 违法外键约束
INSERT INTO employees(employee_id, last_name, email, hire_date, job_id)
VALUES ( 208, 'Nobody', 'Nobody', '2018-06-06', 'NOT_EXIST');
-- 违法非空约束
INSERT INTO employees(employee_id)
VALUES ( 209 );

-- 为 employees 表一次性新增两条记录。
-- Except for Oracle
INSERT INTO employees(employee_id, first_name, last_name, email,
                      phone_number, hire_date, job_id, salary,
                      commission_pct, manager_id, department_id)
VALUES ( 209, 'David', 'Lee', 'DavidLee',
         '600.545.3428', '2018-08-08', 'SA_REP', 7000,
         0.2, 149, 80),
       ( 210, 'Otto', 'Smith', 'OttoSmith',
         '102.667.5439', '2018-08-30', 'AC_ACCOUNT', 7600,
         NULL, 205, 110);

-- 创建一个新表 emp_archive，并且通过一个查询将数据插入该表。
CREATE TABLE emp_archive
    ( employee_id    INTEGER NOT NULL
    , first_name     CHARACTER VARYING(20)
    , last_name      CHARACTER VARYING(25) NOT NULL
    , email          CHARACTER VARYING(25) NOT NULL
    , phone_number   CHARACTER VARYING(20)
    , hire_date      DATE NOT NULL
    , job_id         CHARACTER VARYING(10) NOT NULL
    , salary         NUMERIC(8,2)
    , commission_pct NUMERIC(2,2)
    , manager_id     INTEGER
    , department_id  INTEGER
    ) ;
INSERT INTO emp_archive(employee_id, first_name, last_name, email,
                        phone_number, hire_date, job_id, salary,
                        commission_pct, manager_id, department_id)
SELECT employee_id, first_name, last_name, email,
       phone_number, hire_date, job_id, salary,
       commission_pct, manager_id, department_id
  FROM employees
 WHERE salary > 10000
 ORDER BY hire_date;

-- 14.2 更新数据
-- 更新 emp_archive 表中编号为 207 的员工信息，包括电话号码和薪水。
UPDATE emp_archive
   SET phone_number = '515.123.9009',
       salary = 13000
 WHERE employee_id = 205;

-- 更新数据时，数据库同样会进行约束校验。
-- 不存在编号为 0 的部门，违法外键约束
UPDATE employees
   SET department_id = 0
 WHERE employee_id = 207;

-- 通过一个关联子查询更新 emp_archive 表中的电话信息。
UPDATE emp_archive
   SET phone_number = (SELECT e.phone_number 
                         FROM employees e
                        WHERE e.employee_id = emp_archive.employee_id), 
       commission_pct = 0.2, 
       department_id = 80
 WHERE job_id = 'SA_MAN';

-- 14.3 删除数据
-- 删除 emp_merge 表中编号为 114 的记录。
-- SELECT *
DELETE
  FROM emp_archive
 WHERE employee_id = 114;

-- 尝试删除 department 表中的数据，但是违反了外键约束。
-- SELECT *
DELETE
  FROM departments
 WHERE department_id = 60;

-- 14.4 合并数据
-- 创建一个表 emp_merge，作为合并操作的目标。
CREATE TABLE emp_merge
    ( employee_id    INTEGER NOT NULL
    , first_name     CHARACTER VARYING(20)
    , last_name      CHARACTER VARYING(25) NOT NULL
    , email          CHARACTER VARYING(25) NOT NULL
    , CONSTRAINT     emp_merge_pk
                     PRIMARY KEY (employee_id)
    , CONSTRAINT     emp_merge_email
                     UNIQUE (email) );

-- 将 employees 表中 IT 部门的员工信息合并到 emp_merge 中。
-- Oracle, SQL Server and Db2
MERGE INTO emp_merge t
USING (SELECT employee_id, first_name, last_name, email
         FROM employees
        WHERE department_id = 60) s
   ON (t.employee_id = s.employee_id)
 WHEN MATCHED THEN
      UPDATE
         SET t.first_name = s.first_name,
             t.last_name  = s.last_name,
             t.email      = s.email
WHEN NOT MATCHED THEN
      INSERT (employee_id, first_name, last_name, email)
      VALUES (s.employee_id, s.first_name, s.last_name, s.email);

-- 将 emp_merge 中的 first_name 设置为空，再次运行相同的 MERGE 语句。
UPDATE emp_merge
   SET first_name = NULL; 

-- 也可以选择执行 MATCHED 或者 NOT MATCHED 部分。
-- Oracle, SQL Server and Db2
MERGE INTO emp_merge t
USING (SELECT employee_id, first_name, last_name, email
         FROM employees
        WHERE department_id = 60) s
   ON (t.employee_id = s.employee_id)
WHEN NOT MATCHED THEN
      INSERT (employee_id, first_name, last_name, email)
      VALUES (s.employee_id, s.first_name, s.last_name, s.email);

-- MERGE 命令还可以执行删除操作。
-- Oracle only
MERGE INTO emp_merge t
USING (SELECT employee_id, first_name, last_name, email
         FROM employees
        WHERE department_id = 60) s
   ON (t.employee_id = s.employee_id)
 WHEN MATCHED THEN
      UPDATE
         SET t.first_name = s.first_name,
             t.last_name  = s.last_name,
             t.email      = s.email
      DELETE WHERE t.last_name = 'Austin';

-- MERGE 命令还可以执行删除操作。
-- SQL Server and Db2
MERGE INTO emp_merge t
USING (SELECT employee_id, first_name, last_name, email
         FROM employees
        WHERE department_id = 60) s
   ON (t.employee_id = s.employee_id)
 WHEN MATCHED AND t.last_name = 'Austin' THEN 
      DELETE 
 WHEN MATCHED THEN
      UPDATE
         SET t.first_name = s.first_name,
             t.last_name  = s.last_name,
             t.email      = s.email;

-- MySQL
INSERT INTO emp_merge(employee_id, first_name, last_name, email)
SELECT employee_id, first_name, last_name, email
  FROM employees s
 WHERE department_id = 60
    ON DUPLICATE KEY UPDATE
       first_name = s.first_name,
       last_name  = s.last_name,
       email      = s.email;

-- PostgreSQL and SQLite
INSERT INTO emp_merge(employee_id, first_name, last_name, email)
SELECT employee_id, first_name, last_name, email
  FROM employees
 WHERE department_id = 60
    ON CONFLICT(employee_id) DO UPDATE
   SET first_name = EXCLUDED.first_name,
       last_name  = EXCLUDED.last_name,
       email      = EXCLUDED.email
 WHERE emp_merge.last_name = 'Austin';
